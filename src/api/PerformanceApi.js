/**
 * Super API Documentation
 * The Super API makes superannuation fund data easily accessible for developers.  Build the future.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@superapi.com.au
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIEntitiesAnnualPerformance from '../model/APIEntitiesAnnualPerformance';
import APIEntitiesCumulativePerformance from '../model/APIEntitiesCumulativePerformance';
import APIEntitiesPerformance from '../model/APIEntitiesPerformance';

/**
* Performance service.
* @module api/PerformanceApi
* @version 1.0.0
*/
export default class PerformanceApi {

    /**
    * Constructs a new PerformanceApi. 
    * @alias module:api/PerformanceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Annual Performance
     * The annual performance for a FundOption for a given year.
     * @param {String} name 
     * @param {Number} year Year of the performance data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/APIEntitiesAnnualPerformance} and HTTP response
     */
    getV1NameAnnualWithHttpInfo(name, year) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getV1NameAnnual");
      }
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getV1NameAnnual");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        'year': year
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APIEntitiesAnnualPerformance;
      return this.apiClient.callApi(
        '/v1/{name}/annual', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Annual Performance
     * The annual performance for a FundOption for a given year.
     * @param {String} name 
     * @param {Number} year Year of the performance data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/APIEntitiesAnnualPerformance}
     */
    getV1NameAnnual(name, year) {
      return this.getV1NameAnnualWithHttpInfo(name, year)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Cumulative Performance
     * The cumulative performance from the inception of the FundOption.  This represents the growth over time from the inception date of the FundOption to the requested date.
     * @param {String} name 
     * @param {Date} startDate Start date of the desired cumulative period
     * @param {Date} endDate End date of the desired cumulative period
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/APIEntitiesCumulativePerformance} and HTTP response
     */
    getV1NameCumulativeWithHttpInfo(name, startDate, endDate) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getV1NameCumulative");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling getV1NameCumulative");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getV1NameCumulative");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        'startDate': startDate,
        'endDate': endDate
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APIEntitiesCumulativePerformance;
      return this.apiClient.callApi(
        '/v1/{name}/cumulative', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cumulative Performance
     * The cumulative performance from the inception of the FundOption.  This represents the growth over time from the inception date of the FundOption to the requested date.
     * @param {String} name 
     * @param {Date} startDate Start date of the desired cumulative period
     * @param {Date} endDate End date of the desired cumulative period
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/APIEntitiesCumulativePerformance}
     */
    getV1NameCumulative(name, startDate, endDate) {
      return this.getV1NameCumulativeWithHttpInfo(name, startDate, endDate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Daily Performance
     * The performance for a superannuation FundOption on a specific day.  Not all FundOptions will have a performance on every day, as some FundOptions are not relevant on every day (ie: public holidays, weekends, market closures, etc).  A result of 0 represents no performance.
     * @param {String} name 
     * @param {Date} _date Date of the performance data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/APIEntitiesPerformance} and HTTP response
     */
    getV1NameDailyWithHttpInfo(name, _date) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getV1NameDaily");
      }
      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling getV1NameDaily");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        'date': _date
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APIEntitiesPerformance;
      return this.apiClient.callApi(
        '/v1/{name}/daily', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Daily Performance
     * The performance for a superannuation FundOption on a specific day.  Not all FundOptions will have a performance on every day, as some FundOptions are not relevant on every day (ie: public holidays, weekends, market closures, etc).  A result of 0 represents no performance.
     * @param {String} name 
     * @param {Date} _date Date of the performance data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/APIEntitiesPerformance}
     */
    getV1NameDaily(name, _date) {
      return this.getV1NameDailyWithHttpInfo(name, _date)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Latest Performance
     * Retrieves the performance for the most recent date, for which performance data exists.
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/APIEntitiesPerformance} and HTTP response
     */
    getV1NameDailyLatestWithHttpInfo(name) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getV1NameDailyLatest");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APIEntitiesPerformance;
      return this.apiClient.callApi(
        '/v1/{name}/daily/latest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Latest Performance
     * Retrieves the performance for the most recent date, for which performance data exists.
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/APIEntitiesPerformance}
     */
    getV1NameDailyLatest(name) {
      return this.getV1NameDailyLatestWithHttpInfo(name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Today's Performance
     * Retrieves the performance for today.  This retrieves the same results as the Daily endpoint, but provides a shortcut to retrieve todays performance for a given FundOption.
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/APIEntitiesPerformance} and HTTP response
     */
    getV1NameDailyTodayWithHttpInfo(name) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getV1NameDailyToday");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APIEntitiesPerformance;
      return this.apiClient.callApi(
        '/v1/{name}/daily/today', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Today's Performance
     * Retrieves the performance for today.  This retrieves the same results as the Daily endpoint, but provides a shortcut to retrieve todays performance for a given FundOption.
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/APIEntitiesPerformance}
     */
    getV1NameDailyToday(name) {
      return this.getV1NameDailyTodayWithHttpInfo(name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Yesterday's Performance
     * Retrieves the performance for yesterday.  This retrieves the same results as the Daily endpoint, but provides a shortcut to retrieve yesterday performance for a given FundOption.
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/APIEntitiesPerformance} and HTTP response
     */
    getV1NameDailyYesterdayWithHttpInfo(name) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getV1NameDailyYesterday");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APIEntitiesPerformance;
      return this.apiClient.callApi(
        '/v1/{name}/daily/yesterday', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Yesterday's Performance
     * Retrieves the performance for yesterday.  This retrieves the same results as the Daily endpoint, but provides a shortcut to retrieve yesterday performance for a given FundOption.
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/APIEntitiesPerformance}
     */
    getV1NameDailyYesterday(name) {
      return this.getV1NameDailyYesterdayWithHttpInfo(name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
